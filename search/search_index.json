{
    "docs": [
        {
            "location": "/",
            "text": "Set-Up\n\n\nWelcome to an \nIntroduction to Python with Telegram Bots\n. To begin, we must first set up the \npython programming language\n1\n2\n and the \npython-telegram-bot library\n. \nPlease complete these installation before the workshop.\n\n\nInstructions for Windows and macOS operating systems follow\n3\n. If you run into any problems, you may contact through telegram:\n\n\n\n\n@ningyuan\n\n\n\n\nWindows\n\n\nDownload the latest Python 3 package from the \nofficial website\n.\n\n\n\nRun the installation with the default configuration. \nTake note of where python is being installed\n, we will need this later. Take a screenshot of it, or write it down somewhere.\n\n\n\nAfter the installation has completed, we will need to add the python package manager to the system path, in order to install the \npython-telegram-bot\n package. First, find the 'advanced system settings' through the control panel. We recommend you use the search function.\n\n\n\nThen, click on 'environment variables'.\n\n\n\nSelect the '\nPath\n' variable, and click edit.\n\n\n\nClick on new. Here, we enter the path to pip3, the Python 3 package manager. The path should look something like this,\n\n\nC:\\Users\\<your_username>\\AppData\\Local\\Programs\\Python\\Python<version-number>\\Scripts\n\n\n\n\nDo not simply copy and paste the above.\n Remember in the second step when we said to take note of where python is being installed? This is just the \"\nScripts\n\" folder within that location. So, from the first step, simply add in \n\"\\Scripts\"\n. \n\n\n(Refer to where Python was installed in the second step. Then, add \n\\Scripts\n to the end of that.)\n\n\nBe careful though, as adding in the wrong path will not produce an error in this step. Rather, the later steps will fail. If you want to make sure, you can navigate to the \nAppData\n folders by typing in \n%appdata%\n in the windows search menu. \n\n\n\nYou should have something that looks like this. Press 'OK' on everything, and proceed on to the next step.\n\n\n\nOpen up the windows command prompt. You can do this by searching for the application \n'Command Prompt'\n, or by opening up the run window with the Windows Key + \nR\n, and typing in \ncmd\n.\n\n\nEnter the following command to execute the installation.\n\n\npip3 install python-telegram-bot\n\n\n\n\n\n\nIf your installation has been successful, it'll look something like this!\n\n\n\nmacOS\n\n\n\n\nDownload and install python version 3.6.4 from the website https://www.python.org/downloads/mac-osx/. \n\n\nDownload and install python-telegram-bot. \n\n\n\n\nOpen your terminal (just search for \"terminal\"). Just type in the following line to install:\n\n\npip3 install python-telegram-bot\n\n\n\n\n\n\n\n\n\n\n\n\nTo be more precise, this is the CPython \ninterpreter\n for the python programming language. This tells the computer how to 'make sense' of python code.\u00a0\n\u21a9\n\n\n\n\n\n\nWe are using Python 3, which is a version of python. Make sure that you're not getting Python 2!\u00a0\n\u21a9\n\n\n\n\n\n\nIf you're able to run an OS that is not Windows or macOS (\nABSOLUTELY PROPRIETARY\n), then I assume you can handle the installation by yourself.\u00a0\n\u21a9",
            "title": "Set-Up"
        },
        {
            "location": "/#set-up",
            "text": "Welcome to an  Introduction to Python with Telegram Bots . To begin, we must first set up the  python programming language 1 2  and the  python-telegram-bot library .  Please complete these installation before the workshop.  Instructions for Windows and macOS operating systems follow 3 . If you run into any problems, you may contact through telegram:   @ningyuan",
            "title": "Set-Up"
        },
        {
            "location": "/#windows",
            "text": "Download the latest Python 3 package from the  official website .  Run the installation with the default configuration.  Take note of where python is being installed , we will need this later. Take a screenshot of it, or write it down somewhere.  After the installation has completed, we will need to add the python package manager to the system path, in order to install the  python-telegram-bot  package. First, find the 'advanced system settings' through the control panel. We recommend you use the search function.  Then, click on 'environment variables'.  Select the ' Path ' variable, and click edit.  Click on new. Here, we enter the path to pip3, the Python 3 package manager. The path should look something like this,  C:\\Users\\<your_username>\\AppData\\Local\\Programs\\Python\\Python<version-number>\\Scripts  Do not simply copy and paste the above.  Remember in the second step when we said to take note of where python is being installed? This is just the \" Scripts \" folder within that location. So, from the first step, simply add in  \"\\Scripts\" .   (Refer to where Python was installed in the second step. Then, add  \\Scripts  to the end of that.)  Be careful though, as adding in the wrong path will not produce an error in this step. Rather, the later steps will fail. If you want to make sure, you can navigate to the  AppData  folders by typing in  %appdata%  in the windows search menu.   You should have something that looks like this. Press 'OK' on everything, and proceed on to the next step.  Open up the windows command prompt. You can do this by searching for the application  'Command Prompt' , or by opening up the run window with the Windows Key +  R , and typing in  cmd .  Enter the following command to execute the installation.  pip3 install python-telegram-bot   If your installation has been successful, it'll look something like this!",
            "title": "Windows"
        },
        {
            "location": "/#macos",
            "text": "Download and install python version 3.6.4 from the website https://www.python.org/downloads/mac-osx/.   Download and install python-telegram-bot.    Open your terminal (just search for \"terminal\"). Just type in the following line to install:  pip3 install python-telegram-bot      To be more precise, this is the CPython  interpreter  for the python programming language. This tells the computer how to 'make sense' of python code.\u00a0 \u21a9    We are using Python 3, which is a version of python. Make sure that you're not getting Python 2!\u00a0 \u21a9    If you're able to run an OS that is not Windows or macOS ( ABSOLUTELY PROPRIETARY ), then I assume you can handle the installation by yourself.\u00a0 \u21a9",
            "title": "macOS"
        },
        {
            "location": "/01-basics/",
            "text": "One way to understand programming is as a process of \ntransforming\n data. A simple calculator performing addition is programmed, for example, to transform two numbers into one.\n\n\n\n\n\n\n\n\nIt is therefore necessary to consider,\n\n\n\n\nTypes of data\n\n\nOperations on data\n\n\nNaming of data\n\n\n\n\nData Types and Their Operations\n\n\nThere are many built-in data types in python\n1\n. For now, we need only focus on the following,\n\n\n\n\nIntegers (\nint\n)\n\n\nStrings (\nstr\n)\n\n\nBooleans (\nbool\n)\n\n\n\n\nIntegers\n\n\nIntegers represent whole numbers, such as 0, 12, 93214, -1, and so on. Try the following, and observe the output,\n\n\n>>> 1\n>>> 52\n>>> 0\n>>> -3\n>>> 2 + 6\n>>> 2 - 6\n>>> 2 * 6\n>>> 2 ** 6\n>>> 2 / 6\n>>> 2 // 6\n>>> 2 % 6\n>>> (2 + 6) * 3 / 10\n>>> 2 / 0\n>>> 2 // 0\n\n\n\n\nAs you may have noticed some familiar \noperators\n, such as addition (\n+\n), subtraction (\n-\n), multiplication (\n*\n), and division (\n/\n). The double asterisks (\n**\n) is the 'power' operator, which raises the first number to the power of the second; the double forward slashes (\n//\n) is the 'floored division' operator, which divides the first number by the second and gives the answer rounded down. The percent sign (\n%\n) is the modulo operator, which gives the remainder of the division of the first number by the second.\n2\n The order of operations apply.\n\n\nThe last two expressions raises an error, as division by zero is not allowed. \n\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n\n\n\n\nErrors in programming are extremely common, but generally harmless. Don't be afraid to run a command and fail! \n\n\nStrings\n\n\nStrings are sequences of characters, which can include letters, numbers, and symbols. Strings \nmust\n be surrounded by either single quotes (\n'\n) or double quotes (\n\"\n).\n3\n Try the following examples:\n\n\n>>> 'abcg'\n>>> '!@#$%&'\n>>> '12347'\n>>> 'abc123'\n>>> 'This is a sentence'\n>>> 'You can use single quotes'\n>>> \"or double quotes\"\n>>> 'as long as you use the same ones for each string...'\n>>> \"There can be 4 mix 0f numbers, and symb*$s!\"\n\n\n\n\nIf you find the IDLE spitting errors, for example,\n\n\n>>> 'This is a sentence\n  File \"<stdin>\", line 1\n    'This is a sentence\n                      ^\nSyntaxError: EOL while scanning string literal\n\n\n\n\nMake sure that you have surrounded both ends of the string with quotation marks, and that for each string you have used the same type of quotation marks.\n\n\nDo not confuse an integer with a string\n. The integer \n12\n is not the same as the string \n'12'\n. Integers are representations of a \nnumerical value\n, while strings are just characters. The integer \n12\n represents the quantity \n12\n. The string \n'12'\n represents the character \n'1'\n followed by the character \n'2'\n. Superficially, the former is not wrapped with quotation marks, but the latter is.\n4\n\n\nLike integers, strings can be operated upon. To concatenate\n5\n strings, we use the plus (\n+\n) operator.\n\n\n>>> 'a' + 'b'\n>>> 'a' + 'b' + 'c' + '1' + '!'\n>>> 'hello, ' + 'how are you today' + '?'\n\n\n\n\nBooleans\n\n\nUnlike integers and strings, which may take up any number of values\n6\n, booleans can only be \nTrue\n or \nFalse\n.\n\n\n>>> True\n>>> False\n\n\n\n\nAs we will see shortly, booleans are \nabsolutely essential\n in programming. There are three boolean operators which come in the form of words rather than symbols: \nnot\n, \nand\n, \nor\n.\n\n\n>>> not True\n>>> not False\n>>> False and False\n>>> True and False\n>>> True and True\n>>> False or False\n>>> True or False\n>>> True or True\n>>> not (not True or (False and not True))\n\n\n\n\n\n\n\n\n\n\n\n\nFor the curious, see the \ndocs\n.\u00a0\n\u21a9\n\n\n\n\n\n\nI use the term 'number' here, instead of integer, as these operations can also apply to other data types, including other representations of numbers.\u00a0\n\u21a9\n\n\n\n\n\n\nWhich type of quotation marks you use depends on your preference, and sometimes the context. \nHere\n is a decent forum post on this issue.\u00a0\n\u21a9\n\n\n\n\n\n\nDon't worry if this doesn't yet make sense to you. It's may be rather counter-intuitive at first.\u00a0\n\u21a9\n\n\n\n\n\n\nTo connect or combine\u00a0\n\u21a9\n\n\n\n\n\n\n...which may \nvirtually\n take up any number of values...\u00a0\n\u21a9",
            "title": "1. Data Types, Operations, and Variables"
        },
        {
            "location": "/01-basics/#data-types-and-their-operations",
            "text": "There are many built-in data types in python 1 . For now, we need only focus on the following,   Integers ( int )  Strings ( str )  Booleans ( bool )",
            "title": "Data Types and Their Operations"
        },
        {
            "location": "/01-basics/#integers",
            "text": "Integers represent whole numbers, such as 0, 12, 93214, -1, and so on. Try the following, and observe the output,  >>> 1\n>>> 52\n>>> 0\n>>> -3\n>>> 2 + 6\n>>> 2 - 6\n>>> 2 * 6\n>>> 2 ** 6\n>>> 2 / 6\n>>> 2 // 6\n>>> 2 % 6\n>>> (2 + 6) * 3 / 10\n>>> 2 / 0\n>>> 2 // 0  As you may have noticed some familiar  operators , such as addition ( + ), subtraction ( - ), multiplication ( * ), and division ( / ). The double asterisks ( ** ) is the 'power' operator, which raises the first number to the power of the second; the double forward slashes ( // ) is the 'floored division' operator, which divides the first number by the second and gives the answer rounded down. The percent sign ( % ) is the modulo operator, which gives the remainder of the division of the first number by the second. 2  The order of operations apply.  The last two expressions raises an error, as division by zero is not allowed.   Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero  Errors in programming are extremely common, but generally harmless. Don't be afraid to run a command and fail!",
            "title": "Integers"
        },
        {
            "location": "/01-basics/#strings",
            "text": "Strings are sequences of characters, which can include letters, numbers, and symbols. Strings  must  be surrounded by either single quotes ( ' ) or double quotes ( \" ). 3  Try the following examples:  >>> 'abcg'\n>>> '!@#$%&'\n>>> '12347'\n>>> 'abc123'\n>>> 'This is a sentence'\n>>> 'You can use single quotes'\n>>> \"or double quotes\"\n>>> 'as long as you use the same ones for each string...'\n>>> \"There can be 4 mix 0f numbers, and symb*$s!\"  If you find the IDLE spitting errors, for example,  >>> 'This is a sentence\n  File \"<stdin>\", line 1\n    'This is a sentence\n                      ^\nSyntaxError: EOL while scanning string literal  Make sure that you have surrounded both ends of the string with quotation marks, and that for each string you have used the same type of quotation marks.  Do not confuse an integer with a string . The integer  12  is not the same as the string  '12' . Integers are representations of a  numerical value , while strings are just characters. The integer  12  represents the quantity  12 . The string  '12'  represents the character  '1'  followed by the character  '2' . Superficially, the former is not wrapped with quotation marks, but the latter is. 4  Like integers, strings can be operated upon. To concatenate 5  strings, we use the plus ( + ) operator.  >>> 'a' + 'b'\n>>> 'a' + 'b' + 'c' + '1' + '!'\n>>> 'hello, ' + 'how are you today' + '?'",
            "title": "Strings"
        },
        {
            "location": "/01-basics/#booleans",
            "text": "Unlike integers and strings, which may take up any number of values 6 , booleans can only be  True  or  False .  >>> True\n>>> False  As we will see shortly, booleans are  absolutely essential  in programming. There are three boolean operators which come in the form of words rather than symbols:  not ,  and ,  or .  >>> not True\n>>> not False\n>>> False and False\n>>> True and False\n>>> True and True\n>>> False or False\n>>> True or False\n>>> True or True\n>>> not (not True or (False and not True))      For the curious, see the  docs .\u00a0 \u21a9    I use the term 'number' here, instead of integer, as these operations can also apply to other data types, including other representations of numbers.\u00a0 \u21a9    Which type of quotation marks you use depends on your preference, and sometimes the context.  Here  is a decent forum post on this issue.\u00a0 \u21a9    Don't worry if this doesn't yet make sense to you. It's may be rather counter-intuitive at first.\u00a0 \u21a9    To connect or combine\u00a0 \u21a9    ...which may  virtually  take up any number of values...\u00a0 \u21a9",
            "title": "Booleans"
        },
        {
            "location": "/02-basics/",
            "text": "A data structure is something we use to store values. A list is an important in-built data structure in python, which we represent using square brackets:\n\n\nmy_list = [1, 2, 3, 4, 5]\n\n\n\n\nWe can access the contents of a list using indices, just like we did for strings. We can also find the length of the list using len. \n\n\nmy_list = [1, 2, 3, 4, 5]\nnumber = my_list[3]    # number == 4\nlength = len(my_list)  # length == 5\n\n\n\n\nLet's now try writing a program to find the average of the values in a list.\n\n\nlst = [1, 2, 3, 4]\ntotal = 0\nfor x in lst:\n    total = total + x\nresult = total / len(lst)\nprint(result)\n\n\n\n\nNow, try writing a program that will find you the largest value in a list. \n\n\nAnother useful data structure is called a dictionary.\n\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\n\n\n\n\nA dictionary contains entries which are key-value pairs. In the example above, a : 1 is a key-value pair where a is the key and 1 is the value. Just like in a normal dictionary, we can lookup a dictionary to retrieve the corresponding value of a key as such:\n\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nnumber = dic['b']  # number == 2\n\n\n\n\nWe can also add an entry to the dictionary as such:\n\n\nmy_dict['d'] = 4",
            "title": "2. Data Structures"
        },
        {
            "location": "/03-basics/",
            "text": "Similar to how you would read a script, Python reads in a top-down order. You, the scriptwriter, are able to control how Python reads and execute the script. \n\n\nThis is achieved using \ncontrol flow\n statements. There are 3 common control flow statements in Python,\n\n\n\n\nif\n\n\nfor\n\n\nwhile\n\n\n\n\nThe \nif\n Statement\n\n\nSimply put, \nif\n a certain condition is \ntrue\n, Python runs the block of statement in the \nif\n-block, \nelse\n it runs the statements in the \nelse\n-block. The \nelse\n clause is optional.\n\n\ngrade = input('Enter your grade: ')\n\nif grades >= 85: \n    print('Great job!')\nelif grades >= 50:\n    print('Study harder!')\nelse:\n    print('Hello! Wake up!')\n\n\n\n\nThere is also the special operator \"in\" which we can use to check if an element is in a string, list, or dictionary. What does the following program print?\n\n\nlst = [1,2,3,4]\ndic = {1 : 2, 3 : 4}\nif 2 not in lst:\n    print(\"hi\")\nelif 2 in dic:\n    print(\"hello\")\nelif 1 in dic:\n    print(\"hallo\")\nelse:\n    print(\"hey\")\n\n\n\n\nThe \nfor\n Statement\n\n\nA 'for' loop allows the programmer to iterate over a sequence of objects.\n\n\nfor i in range(1,5)\n    print(i)\nprint('End')\n\n\n\n\nOutput\n\n\n1\n2\n3\n4\nEnd\n\n\n\n\nIt can also be use to iterate through a list.\n\n\nmy_pets = ['lions', 'tigers', 'eagles', 'crocs']\n\nfor pets in my_pets:\n    print(pets)\n\n\n\n\nOutput\n\n\nlions\ntigers\neagles\ncrocs\n\n\n\n\nTry reading this program to figure out what it does: \n\n\nstring = \"hello\"\nnew_str = \"\"\nfor letter in string:\n    new_str = letter + new_str\nprint(new_str)\n\n\n\n\nBasically, it loops through each letter in the string \"hello\", and at every stage of the loop, we add the letter to the back of the new_str. So, this program reverses the letters in the string.\n\n\nNow, try writing a program that finds the largest number in a given list. \n\n\nThe \nwhile\n Statement\n\n\nwhile\n a certain condition is true, the loop continues until the condition turns false. \n\n\nnum = 88\nrun = True\n\nwhile run:\n    guess = input('Enter your guess: ')\n    if guess < num:\n        print('The answer is higher')\n    elif guess > num:\n        print('The answer is lower')\n    elif guess == num:\n        print('That's right!')\n        run = False\n\n\n\n\nThis program uses a while loop to sum up the integers from 1 to 9. \n\n\ncounter = 0\ntotal = 0\nwhile counter < 10:\n      total = total + counter\n      counter = counter + 1\nprint(total)\n\n\n\n\nIn this while loop, \"counter < 10\" is a condition. So, at every iteration of the loop, the counter is added to total, and the value of the counter is incremented by 1. When counter becomes 10, the program will break out of the loop and print the value of total, which is 45. \n\n\nCan you try writing a program to reverse the order of letters using a while loop?",
            "title": "3. Control Flow"
        },
        {
            "location": "/03-basics/#the-if-statement",
            "text": "Simply put,  if  a certain condition is  true , Python runs the block of statement in the  if -block,  else  it runs the statements in the  else -block. The  else  clause is optional.  grade = input('Enter your grade: ')\n\nif grades >= 85: \n    print('Great job!')\nelif grades >= 50:\n    print('Study harder!')\nelse:\n    print('Hello! Wake up!')  There is also the special operator \"in\" which we can use to check if an element is in a string, list, or dictionary. What does the following program print?  lst = [1,2,3,4]\ndic = {1 : 2, 3 : 4}\nif 2 not in lst:\n    print(\"hi\")\nelif 2 in dic:\n    print(\"hello\")\nelif 1 in dic:\n    print(\"hallo\")\nelse:\n    print(\"hey\")",
            "title": "The if Statement"
        },
        {
            "location": "/03-basics/#the-for-statement",
            "text": "A 'for' loop allows the programmer to iterate over a sequence of objects.  for i in range(1,5)\n    print(i)\nprint('End')  Output  1\n2\n3\n4\nEnd  It can also be use to iterate through a list.  my_pets = ['lions', 'tigers', 'eagles', 'crocs']\n\nfor pets in my_pets:\n    print(pets)  Output  lions\ntigers\neagles\ncrocs  Try reading this program to figure out what it does:   string = \"hello\"\nnew_str = \"\"\nfor letter in string:\n    new_str = letter + new_str\nprint(new_str)  Basically, it loops through each letter in the string \"hello\", and at every stage of the loop, we add the letter to the back of the new_str. So, this program reverses the letters in the string.  Now, try writing a program that finds the largest number in a given list.",
            "title": "The for Statement"
        },
        {
            "location": "/03-basics/#the-while-statement",
            "text": "while  a certain condition is true, the loop continues until the condition turns false.   num = 88\nrun = True\n\nwhile run:\n    guess = input('Enter your guess: ')\n    if guess < num:\n        print('The answer is higher')\n    elif guess > num:\n        print('The answer is lower')\n    elif guess == num:\n        print('That's right!')\n        run = False  This program uses a while loop to sum up the integers from 1 to 9.   counter = 0\ntotal = 0\nwhile counter < 10:\n      total = total + counter\n      counter = counter + 1\nprint(total)  In this while loop, \"counter < 10\" is a condition. So, at every iteration of the loop, the counter is added to total, and the value of the counter is incremented by 1. When counter becomes 10, the program will break out of the loop and print the value of total, which is 45.   Can you try writing a program to reverse the order of letters using a while loop?",
            "title": "The while Statement"
        },
        {
            "location": "/04-basics/",
            "text": "def sum(x, y):\n    return x+y\n\n\n\n\nThis is a function. We use the keyword \"def\" to start off the function, followed by the name of the function (in this case, \"sum\"). \nWithin the brackets, we specify the parameters or inputs to the function. We use the keyword \"return\" to specify the outputs of the function.\n\n\nTo use a function, or perform what we call a function call, we could write:\n\n\na = sum(3,4)\n\n\n\n\nThis assigns the value of sum(3,4), which is 7, to the variable a. \n\n\nUnlike in maths, however, functions in python do not need to have inputs and outputs. So, this is also a valid function:\n\n\ndef sayhi():\n    print(\"hi\")\n\n\n\n\nFunctions are an important tool that allows us to organise our code and package sets of instructions which perform a specific task. \nOnce we have defined a function, we will be able to use it in multiple places. We can also use functions that other people have written in our code.\n\n\nFor example, let's say that we have downloaded some data off an excel file as a list of lists, with each sublist representing a row.\n\n\n#input = [[1,2,3,4],[5,6,7,8],[2,3,4,5] ... ]\n\n\n\n\nWe can use the predefined sum() and max() function in python to find the sum of values in a list. So, we can write a function that takes in this input and finds the maximum value out of all the data. \n\n\ndef max_val(input):\n    newlst = []\n    for lst in input:\n        newlst = newlst + [sum(lst)]\n    return max(newlst)\n\n\n\n\nTo consolidate what we've learnt so far, let's try out writing two functions.\n\n\nFirstly, suppose we want to write a function freq_dic() that takes in a paragraph and outputs a dictionary of word frequencies. So, each key in the dictionary is a word in the paragraph, and the value is the number of times the word appears in the paragraph. For example, \n\n\npara = \"the cat on the hat is eating the rat on the mat\"\ndic = make_dic(para)\n#dic = {'the': 4, 'cat': 1, 'on': 2, 'hat': 1, 'is': 1, 'eating': 1, 'rat': 1, 'mat': 1}\n\n\n\n\nFor this exercise, we will use the method .split() to split the paragraph into a list of words. For example:\n\n\nstring = \"I don't eat fish\"\nlst = string.split()\n#lst = ['I', \"don't\", 'eat', 'fish']\n\n\n\n\nNext, let's say we download some data off a website and get this dictionary. We want to find all the choices that don't have fish in the menu. Try writing this function find_no_fish() yourself!\n\n\nmeals = {\n    'noodle'    :   'SEAFOOD IPOH HOR FUN',\n    'asian'     : '''WHITE & BROWN RICE\n                     SOY BRAISED CHICKEN WING X 2\n                     FISH IN PINEAPPLE SAUCE\n                     SCRAMBLED EGG W/ TOMATO SAUCE\n                     CHYE SIM W/ GARLIC\n                     CARROT & CORN SOUP''',\n    'western'   : '''CREAM OF CARROT\n                     ROASTED BEEF STEAK W/ HERB BROWN SAUCE\n                     MASHED POTATO\n                     MIXED BEANS & MUSHROOM''',\n    'indian'    : '''DAL\n                     PANEER KADAI\n                     CHANA MASLA\n                     VEG JALFREZZI\n                     CHICKEN MASALA\n                     TOMATO RICE''',\n    'malay'     : '''BAKED CHICKEN SERVED W/ MUSHROOM SAUCE\n                     WEDGES\n                     EGGPLANT W/ TOMATO PASTE''',\n    'vegetarian': '''STEAMED BEANCURD W/ MUSHROOM GRAVY\n                     SPRING ROLLS\n                     LO HAN CHAI\n                     STIR FRIED SWEET POTATO LEAVES'''\n}",
            "title": "4. Functions"
        },
        {
            "location": "/05-bot/",
            "text": "",
            "title": "5. Installing Packages"
        },
        {
            "location": "/06-bot/",
            "text": "Creating a Bot Account\n\n\nFirst, we need to have a telegram account (bot) to access. Talk to \n@Botfather\n, a telegram bot by telegram to create telegram bots, to create a bot. Copy and paste the HTTP API somewhere.\n1\n\n\n\n\nYou will also need to know your own telegram user ID, so the bot knows who to send messages to. Talk to \n@userinfobot\n to get this information. Once again, copy this information down somewhere.\n\n\n\n\nFinally, before we start writing code, we have to \n/start\n our bot.\n\n\n\n\nSending a Message, Part 1\n\n\nNow, let's write our program. In the first few lines, we need to import the telegram library, and store our HTTP API and user ID in some variables.\n\n\nimport telegram\n\napi_key = '<your api key here>'\nuser_id = '<your user id here>'\n\n\n\n\nNow, we need to store a \nrepresentation\n of the telegram bot into a variable. After this, we will be able to use that variable to tell our bot what to do. Use the \nBot\n \nmethod\n of the \ntelegram\n library like so, passing the HTTP API \napi_key\n as argument\n2\n.\n\n\nbot = telegram.Bot(token=api_key)\n\n\n\n\nFinally, we are ready to send a message from our bot. Use the \nsend_message\n method, with appropriate arguments to tell the bot where to send the message to (\nchat_id\n), and what to say (\ntext\n).\n\n\nbot.send_message(chat_id=user_id, text='USP-Python has started up!')\n\n\n\n\nSave your file, and run the program.\n\n\n\n\nDon't be intimidated by these methods! They work like functions do:\n\n\n\n\nThey have a name, such as \ntelegram.Bot\n, or \nbot.send_message\n3\n\n\nThey have rounded brackets right after their name...\n\n\nand within these brackets are arguments such as \nchat_id=user_id\n\n\n\n\nThe only difference is that we must use the \nargument_name=argument_value\n notation.\n4\n\n\nCheckpoint\n\n\nimport telegram\n\napi_key = '<your api key here>'\nuser_id = '<your user id here>'\n\nbot = telegram.Bot(token=api_key)\nbot.send_message(chat_id=user_id, text='USP-Python has started up!')\n\n\n\n\nQuestions & Exercises\n\n\n\n\nWhat is the type of \napi_key\n and \nuser_id\n?\n\n\n \n\nThey are strings.\n\n\nModify your program so that it sends a second message of your liking.\n\n\nModify your program so that it sends a message to someone else.\n\n\n\n\n\n\n\n\n\n\n\n\nAnd keep it private! This is analogous to a password---anyone with this string of characters can access your bot.\u00a0\n\u21a9\n\n\n\n\n\n\nMethods are similar to functions. We are in fact using the \nBot\n method (function) to \nconstruct\n a \nBot\n object, which we store in the variable \nbot\n. This \nBot\n object further has methods which will allow us to do things like send messages, photos, videos...\u00a0\n\u21a9\n\n\n\n\n\n\nOr, the \nBot\n method of the module \ntelegram\n, and \nsend_message\n of the object \nbot\n, if you want to be \ntechnically\n precise.\u00a0\n\u21a9\n\n\n\n\n\n\nWe have been using \npositional arguments\n. These are \nkeyword arguments\n. \nRead more?\n\u00a0\n\u21a9",
            "title": "6. Sending Messages"
        },
        {
            "location": "/06-bot/#creating-a-bot-account",
            "text": "First, we need to have a telegram account (bot) to access. Talk to  @Botfather , a telegram bot by telegram to create telegram bots, to create a bot. Copy and paste the HTTP API somewhere. 1   You will also need to know your own telegram user ID, so the bot knows who to send messages to. Talk to  @userinfobot  to get this information. Once again, copy this information down somewhere.   Finally, before we start writing code, we have to  /start  our bot.",
            "title": "Creating a Bot Account"
        },
        {
            "location": "/06-bot/#sending-a-message-part-1",
            "text": "Now, let's write our program. In the first few lines, we need to import the telegram library, and store our HTTP API and user ID in some variables.  import telegram\n\napi_key = '<your api key here>'\nuser_id = '<your user id here>'  Now, we need to store a  representation  of the telegram bot into a variable. After this, we will be able to use that variable to tell our bot what to do. Use the  Bot   method  of the  telegram  library like so, passing the HTTP API  api_key  as argument 2 .  bot = telegram.Bot(token=api_key)  Finally, we are ready to send a message from our bot. Use the  send_message  method, with appropriate arguments to tell the bot where to send the message to ( chat_id ), and what to say ( text ).  bot.send_message(chat_id=user_id, text='USP-Python has started up!')  Save your file, and run the program.   Don't be intimidated by these methods! They work like functions do:   They have a name, such as  telegram.Bot , or  bot.send_message 3  They have rounded brackets right after their name...  and within these brackets are arguments such as  chat_id=user_id   The only difference is that we must use the  argument_name=argument_value  notation. 4",
            "title": "Sending a Message, Part 1"
        },
        {
            "location": "/06-bot/#checkpoint",
            "text": "import telegram\n\napi_key = '<your api key here>'\nuser_id = '<your user id here>'\n\nbot = telegram.Bot(token=api_key)\nbot.send_message(chat_id=user_id, text='USP-Python has started up!')",
            "title": "Checkpoint"
        },
        {
            "location": "/06-bot/#questions-exercises",
            "text": "What is the type of  api_key  and  user_id ?    They are strings.  Modify your program so that it sends a second message of your liking.  Modify your program so that it sends a message to someone else.       And keep it private! This is analogous to a password---anyone with this string of characters can access your bot.\u00a0 \u21a9    Methods are similar to functions. We are in fact using the  Bot  method (function) to  construct  a  Bot  object, which we store in the variable  bot . This  Bot  object further has methods which will allow us to do things like send messages, photos, videos...\u00a0 \u21a9    Or, the  Bot  method of the module  telegram , and  send_message  of the object  bot , if you want to be  technically  precise.\u00a0 \u21a9    We have been using  positional arguments . These are  keyword arguments .  Read more? \u00a0 \u21a9",
            "title": "Questions &amp; Exercises"
        },
        {
            "location": "/07-bot/",
            "text": "",
            "title": "7. Reacting to Commands"
        },
        {
            "location": "/08-bot/",
            "text": "",
            "title": "8. Reacting to Messages"
        },
        {
            "location": "/09-bonus/",
            "text": "",
            "title": "9. How to Google"
        }
    ]
}