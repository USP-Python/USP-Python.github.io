{
    "docs": [
        {
            "location": "/",
            "text": "Set-Up\n\n\nWelcome to an \nIntroduction to Python with Telegram Bots\n. To begin, we must first set up the \npython programming language\n1\n2\n and the \npython-telegram-bot library\n. \nPlease complete these installation before the workshop.\n\n\nInstructions for Windows and macOS operating systems follow\n3\n. If you run into any problems, you may contact through telegram:\n\n\n\n\n@ningyuan\n\n\n\n\nWindows\n\n\nDownload the latest Python 3 package from the \nofficial website\n.\n\n\n\nRun the installation with the default configuration. \nTake note of where python is being installed\n, we will need this later.\n\n\n\nAfter the installation has completed, we will need to add the python package manager to the system path, in order to install the \npython-telegram-bot\n package. First, find the 'advanced system settings' through the control panel. We recommend you use the search function.\n\n\n\nThen, click on 'environment variables'.\n\n\n\nSelect the '\nPath\n' variable, and click edit.\n\n\n\nClick on new. Here, we enter the path to pip3, the Python 3 package manager. The path should look something like this,\n\n\nC:\\Users\\<your_username>\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts\n\n\n\n\nRemember in the first step when we said to take note of where python is being installed? This is simple the \"\nScripts\n\" folder of that location. So, from the first step, simply add in \n\"\\Scripts\"\n. \n\n\nBe careful though, as adding in the wrong path will not produce an error in this step. Rather, the later steps will fail. If you want to make sure, you can navigate to the \nAppData\n folders by typing in \n%appdata%\n in the windows search menu. \n\n\n\nYou should have something that looks like this. Press 'OK' on everything, and proceed on to the next step.\n\n\n\nOpen up the windows command prompt. You can do this by searching for the application \n'Command Propt'\n, or by opening up the run window with the Windows Key + \nR\n, and typing in \ncmd\n.\n\n\nEnter the following command to execute the installation\n\n\npip3 install python-telegram-bot\n\n\n\n\n\n\nIf your installation has been successful, it'll look something like this!\n\n\n\nmacOS\n\n\n\n\nDownload and install python3\n\n\nDownload and install python-telegram-bot\n\n\n\n\n\n\n\n\n\n\n\n\nTo be more precise, this is the CPython \ninterpreter\n for the python programming language. This tells the computer how to 'make sense' of python code.\u00a0\n\u21a9\n\n\n\n\n\n\nWe are using Python 3, which is a version of python. Make sure that you're not getting Python 2!\u00a0\n\u21a9\n\n\n\n\n\n\nIf you're able to run an OS that is not Windows or macOS (\nABSOLUTELY PROPRIETARY\n), then I assume you can handle the installation by yourself.\u00a0\n\u21a9",
            "title": "Set-Up"
        },
        {
            "location": "/#set-up",
            "text": "Welcome to an  Introduction to Python with Telegram Bots . To begin, we must first set up the  python programming language 1 2  and the  python-telegram-bot library .  Please complete these installation before the workshop.  Instructions for Windows and macOS operating systems follow 3 . If you run into any problems, you may contact through telegram:   @ningyuan",
            "title": "Set-Up"
        },
        {
            "location": "/#windows",
            "text": "Download the latest Python 3 package from the  official website .  Run the installation with the default configuration.  Take note of where python is being installed , we will need this later.  After the installation has completed, we will need to add the python package manager to the system path, in order to install the  python-telegram-bot  package. First, find the 'advanced system settings' through the control panel. We recommend you use the search function.  Then, click on 'environment variables'.  Select the ' Path ' variable, and click edit.  Click on new. Here, we enter the path to pip3, the Python 3 package manager. The path should look something like this,  C:\\Users\\<your_username>\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts  Remember in the first step when we said to take note of where python is being installed? This is simple the \" Scripts \" folder of that location. So, from the first step, simply add in  \"\\Scripts\" .   Be careful though, as adding in the wrong path will not produce an error in this step. Rather, the later steps will fail. If you want to make sure, you can navigate to the  AppData  folders by typing in  %appdata%  in the windows search menu.   You should have something that looks like this. Press 'OK' on everything, and proceed on to the next step.  Open up the windows command prompt. You can do this by searching for the application  'Command Propt' , or by opening up the run window with the Windows Key +  R , and typing in  cmd .  Enter the following command to execute the installation  pip3 install python-telegram-bot   If your installation has been successful, it'll look something like this!",
            "title": "Windows"
        },
        {
            "location": "/#macos",
            "text": "Download and install python3  Download and install python-telegram-bot       To be more precise, this is the CPython  interpreter  for the python programming language. This tells the computer how to 'make sense' of python code.\u00a0 \u21a9    We are using Python 3, which is a version of python. Make sure that you're not getting Python 2!\u00a0 \u21a9    If you're able to run an OS that is not Windows or macOS ( ABSOLUTELY PROPRIETARY ), then I assume you can handle the installation by yourself.\u00a0 \u21a9",
            "title": "macOS"
        },
        {
            "location": "/01-basics/",
            "text": "One way to understand programming is as a process of \ntransforming\n data. A simple calculator performing addition is programmed, for example, to transform two numbers into one.\n\n\n\n\n\n\n\n\nIt is therefore necessary to consider,\n\n\n\n\nTypes of data\n\n\nOperations on data\n\n\nNaming of data\n\n\n\n\nData Types and Their Operations\n\n\nThere are many built-in data types in python\n1\n. For now, we need only focus on the following,\n\n\n\n\nIntegers (\nint\n)\n\n\nStrings (\nstr\n)\n\n\nBooleans (\nbool\n)\n\n\n\n\nIntegers\n\n\nIntegers represent whole numbers, such as 0, 12, 93214, -1, and so on. Try the following, and observe the output,\n\n\n>>> 1\n>>> 52\n>>> 0\n>>> -3\n>>> 2 + 6\n>>> 2 - 6\n>>> 2 * 6\n>>> 2 ** 6\n>>> 2 / 6\n>>> 2 // 6\n>>> 2 % 6\n>>> (2 + 6) * 3 / 10\n>>> 2 / 0\n>>> 2 // 0\n\n\n\n\nAs you may have noticed some familiar \noperators\n, such as addition (\n+\n), subtraction (\n-\n), multiplication (\n*\n), and division (\n/\n). The double asterisks (\n**\n) is the 'power' operator, which raises the first number to the power of the second; the double forward slashes (\n//\n) is the 'floored division' operator, which divides the first number by the second and gives the answer rounded down. The percent sign (\n%\n) is the modulo operator, which gives the remainder of the division of the first number by the second.\n2\n The order of operations apply.\n\n\nThe last two expressions raises an error, as division by zero is not allowed. \n\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n\n\n\n\nErrors in programming are extremely common, but generally harmless. Don't be afraid to run a command and fail! \n\n\nStrings\n\n\nStrings are sequences of characters, which can include letters, numbers, and symbols. Strings \nmust\n be surrounded by either single quotes (\n'\n) or double quotes (\n\"\n).\n3\n Try the following examples:\n\n\n>>> 'abcg'\n>>> '!@#$%&'\n>>> '12347'\n>>> 'abc123'\n>>> 'This is a sentence'\n>>> 'You can use single quotes'\n>>> \"or double quotes\"\n>>> 'as long as you use the same ones for each string...'\n>>> \"There can be 4 mix 0f numbers, and symb*$s!\"\n\n\n\n\nIf you find the IDLE spitting errors, for example,\n\n\n>>> 'This is a sentence\n  File \"<stdin>\", line 1\n    'This is a sentence\n                      ^\nSyntaxError: EOL while scanning string literal\n\n\n\n\nMake sure that you have surrounded both ends of the string with quotation marks, and that for each string you have used the same type of quotation marks.\n\n\nDo not confuse an integer with a string\n. The integer \n12\n is not the same as the string \n'12'\n. Integers are representations of a \nnumerical value\n, while strings are just characters. The integer \n12\n represents the quantity \n12\n. The string \n'12'\n represents the character \n'1'\n followed by the character \n'2'\n. Superficially, the former is not wrapped with quotation marks, but the latter is.\n4\n\n\nLike integers, strings can be operated upon. To concatenate\n5\n strings, we use the plus (\n+\n) operator.\n\n\n>>> 'a' + 'b'\n>>> 'a' + 'b' + 'c' + '1' + '!'\n>>> 'hello, ' + 'how are you today' + '?'\n\n\n\n\nBooleans\n\n\nUnlike integers and strings, which may take up any number of values\n6\n, booleans can only be \nTrue\n or \nFalse\n.\n\n\n>>> True\n>>> False\n\n\n\n\nAs we will see shortly, booleans are \nabsolutely essential\n in programming. There are three boolean operators which come in the form of words rather than symbols: \nnot\n, \nand\n, \nor\n.\n\n\n>>> not True\n>>> not False\n>>> False and False\n>>> True and False\n>>> True and True\n>>> False or False\n>>> True or False\n>>> True or True\n>>> not (not True or (False and not True))\n\n\n\n\n\n\n\n\n\n\n\n\nFor the curious, see the \ndocs\n.\u00a0\n\u21a9\n\n\n\n\n\n\nI use the term 'number' here, instead of integer, as these operations can also apply to other data types, including other representations of numbers.\u00a0\n\u21a9\n\n\n\n\n\n\nWhich type of quotation marks you use depends on your preference, and sometimes the context. \nHere\n is a decent forum post on this issue.\u00a0\n\u21a9\n\n\n\n\n\n\nDon't worry if this doesn't yet make sense to you. It's may be rather counter-intuitive at first.\u00a0\n\u21a9\n\n\n\n\n\n\nTo connect or combine\u00a0\n\u21a9\n\n\n\n\n\n\n...which may \nvirtually\n take up any number of values...\u00a0\n\u21a9",
            "title": "1. Data Types, Operations, and Variables"
        },
        {
            "location": "/01-basics/#data-types-and-their-operations",
            "text": "There are many built-in data types in python 1 . For now, we need only focus on the following,   Integers ( int )  Strings ( str )  Booleans ( bool )",
            "title": "Data Types and Their Operations"
        },
        {
            "location": "/01-basics/#integers",
            "text": "Integers represent whole numbers, such as 0, 12, 93214, -1, and so on. Try the following, and observe the output,  >>> 1\n>>> 52\n>>> 0\n>>> -3\n>>> 2 + 6\n>>> 2 - 6\n>>> 2 * 6\n>>> 2 ** 6\n>>> 2 / 6\n>>> 2 // 6\n>>> 2 % 6\n>>> (2 + 6) * 3 / 10\n>>> 2 / 0\n>>> 2 // 0  As you may have noticed some familiar  operators , such as addition ( + ), subtraction ( - ), multiplication ( * ), and division ( / ). The double asterisks ( ** ) is the 'power' operator, which raises the first number to the power of the second; the double forward slashes ( // ) is the 'floored division' operator, which divides the first number by the second and gives the answer rounded down. The percent sign ( % ) is the modulo operator, which gives the remainder of the division of the first number by the second. 2  The order of operations apply.  The last two expressions raises an error, as division by zero is not allowed.   Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero  Errors in programming are extremely common, but generally harmless. Don't be afraid to run a command and fail!",
            "title": "Integers"
        },
        {
            "location": "/01-basics/#strings",
            "text": "Strings are sequences of characters, which can include letters, numbers, and symbols. Strings  must  be surrounded by either single quotes ( ' ) or double quotes ( \" ). 3  Try the following examples:  >>> 'abcg'\n>>> '!@#$%&'\n>>> '12347'\n>>> 'abc123'\n>>> 'This is a sentence'\n>>> 'You can use single quotes'\n>>> \"or double quotes\"\n>>> 'as long as you use the same ones for each string...'\n>>> \"There can be 4 mix 0f numbers, and symb*$s!\"  If you find the IDLE spitting errors, for example,  >>> 'This is a sentence\n  File \"<stdin>\", line 1\n    'This is a sentence\n                      ^\nSyntaxError: EOL while scanning string literal  Make sure that you have surrounded both ends of the string with quotation marks, and that for each string you have used the same type of quotation marks.  Do not confuse an integer with a string . The integer  12  is not the same as the string  '12' . Integers are representations of a  numerical value , while strings are just characters. The integer  12  represents the quantity  12 . The string  '12'  represents the character  '1'  followed by the character  '2' . Superficially, the former is not wrapped with quotation marks, but the latter is. 4  Like integers, strings can be operated upon. To concatenate 5  strings, we use the plus ( + ) operator.  >>> 'a' + 'b'\n>>> 'a' + 'b' + 'c' + '1' + '!'\n>>> 'hello, ' + 'how are you today' + '?'",
            "title": "Strings"
        },
        {
            "location": "/01-basics/#booleans",
            "text": "Unlike integers and strings, which may take up any number of values 6 , booleans can only be  True  or  False .  >>> True\n>>> False  As we will see shortly, booleans are  absolutely essential  in programming. There are three boolean operators which come in the form of words rather than symbols:  not ,  and ,  or .  >>> not True\n>>> not False\n>>> False and False\n>>> True and False\n>>> True and True\n>>> False or False\n>>> True or False\n>>> True or True\n>>> not (not True or (False and not True))      For the curious, see the  docs .\u00a0 \u21a9    I use the term 'number' here, instead of integer, as these operations can also apply to other data types, including other representations of numbers.\u00a0 \u21a9    Which type of quotation marks you use depends on your preference, and sometimes the context.  Here  is a decent forum post on this issue.\u00a0 \u21a9    Don't worry if this doesn't yet make sense to you. It's may be rather counter-intuitive at first.\u00a0 \u21a9    To connect or combine\u00a0 \u21a9    ...which may  virtually  take up any number of values...\u00a0 \u21a9",
            "title": "Booleans"
        },
        {
            "location": "/02-basics/",
            "text": "",
            "title": "2. Control Flow"
        },
        {
            "location": "/03-basics/",
            "text": "There are two main kinds of loops: while loops and for loops. This code uses a while loop to sum up the integers from 1 to 9. \n\n\ncounter = 0\nsum = 0\nwhile counter < 10:\n      sum = sum + counter\n      counter = counter + 1\nprint(sum)\n\n\n\n\nIn this while loop, \"counter < 10\" is a condition. So, at every iteration of the loop, the counter is added to sum, and the value of the counter is incremented by 1. When counter becomes 10, the program will break out of the loop and print the value of sum, which is 45. \n\n\nThis program uses a for loop:\n\n\nstr = \"hello\"\nnew_str = \"\"\nfor letter in str:\n    new_str = letter + new_str\nprint(new_str)\n\n\n\n\nBasically, it loops through each letter in the string \"hello\", and at every stage of the loop, we add the letter to the back of the new_str. So, this program reverses the letters in the string.\n\n\nCan you try writing a similar program to reverse the order of letters using a while loop?",
            "title": "3. Loops"
        },
        {
            "location": "/04-basics/",
            "text": "def sum(x, y):\n    return x+y\n\n\n\n\nThis is a function. We use the keyword \"def\" to start off the function, followed by the name of the function (in this case, \"sum\"). \nWithin the brackets, we specify the parameters or inputs to the function. We use the keyword \"return\" to specify the outputs of the function.\n\n\nTo use a function, or perform what we call a function call, we could write:\n\n\na = sum(3,4)\n\n\n\n\nThis assigns the value of sum(3,4), which is 7, to the variable a. \n\n\nUnlike in maths, however, functions in python do not need to have inputs and outputs. So, this is also a valid function:\n\n\ndef sayhi():\n    print(\"hi\")\n\n\n\n\nFunctions are an important tool that allows us to organise our code and package sets of instructions which perform a specific task. \nOnce we have defined a function, we will be able to use it in multiple places. We can also use functions that other people have written in our code.\n\n\n//give example",
            "title": "4. Functions"
        },
        {
            "location": "/05-basics/",
            "text": "A data structure is something we use to store values. A list is an important in-built data structure in python, which we represent using square brackets:\n\n\nmy_list = [1, 2, 3, 4, 5]\n\n\n\n\nWe can access the contents of a list using indices, just like we did for strings. We can also find the length of the list using len. \n\n\nmy_list = [1, 2, 3, 4, 5]\nnumber = list[3]    # number == 4\nlength = len(list)  # length == 5\n\n\n\n\nLet's now try writing a function to find the average of the values in a list.\n\n\ndef average(list):\n    sum = 0\n    for x in list:\n        sum = sum + x\n    result = sum / len(list)\n    return result\n\n\n\n\nNow, try writing a function that will find you the largest value in a list. \n\n\nAnother useful data structure is called a dictionary.\n\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\n\n\n\n\nA dictionary contains entries which are key-value pairs. In the example above, a : 1 is a key-value pair where a is the key and 1 is the value. Just like in a normal dictionary, we can lookup a dictionary to retrieve the corresponding value of a key as such:\n\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nnumber = dic['b']  # number == 2\n\n\n\n\nWe can also add an entry to the dictionary as such:\n\n\nmy_dict['d'] = 4\n\n\n\n\nLet's say we download some data off a website and get this dictionary. We want to find all the choices that don't have fish in the menu. Try writing that function yourself!\n\n\nmeals = {\n    'noodle'    :   'SEAFOOD IPOH HOR FUN',\n    'asian'     : '''WHITE & BROWN RICE\n                     SOY BRAISED CHICKEN WING X 2\n                     FISH IN PINEAPPLE SAUCE\n                     SCRAMBLED EGG W/ TOMATO SAUCE\n                     CHYE SIM W/ GARLIC\n                     CARROT & CORN SOUP''',\n    'western'   : '''CREAM OF CARROT\n                     ROASTED BEEF STEAK W/ HERB BROWN SAUCE\n                     MASHED POTATO\n                     MIXED BEANS & MUSHROOM''',\n    'indian'    : '''DAL\n                     PANEER KADAI\n                     CHANA MASLA\n                     VEG JALFREZZI\n                     CHICKEN MASALA\n                     TOMATO RICE''',\n    'malay'     : '''BAKED CHICKEN SERVED W/ MUSHROOM SAUCE\n                     WEDGES\n                     EGGPLANT W/ TOMATO PASTE''',\n    'vegetarian': '''STEAMED BEANCURD W/ MUSHROOM GRAVY\n                     SPRING ROLLS\n                     LO HAN CHAI\n                     STIR FRIED SWEET POTATO LEAVES'''\n}",
            "title": "5. Data Structures"
        },
        {
            "location": "/06-bot/",
            "text": "",
            "title": "6. Installing Packages"
        },
        {
            "location": "/07-bot/",
            "text": "",
            "title": "7. Sending Messages"
        },
        {
            "location": "/08-bot/",
            "text": "",
            "title": "8. Reacting to Messages"
        },
        {
            "location": "/09-bot/",
            "text": "",
            "title": "9. Sending Commands"
        },
        {
            "location": "/10-bonus/",
            "text": "",
            "title": "10. How to Google"
        }
    ]
}